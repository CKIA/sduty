数据库优化
	从数据库层面理解
		分库分表处理
	从sql脚本理解
		查询语句
		1.	避免在列上做计算操作，计算的列不会走索引，如果必须使用计算，请在=号后面进行计算
		2.	如果某张表中一个或多个字段查询的频率较高时，请使用单列索引或组合索引
		3.	在查询操作时，where请不要使用!=或<>,如果其中一列使用索引，另一列不使用索引，会造成全表扫描情况
		4.	where后面尽量不要使用or条件，使用or时不会走索引，也是全表扫描，建议使用union all，查询两个条件结果集
		5.	in和not in尽量不要使用，可能会导致全表扫描的情况，如果是数值范围查询，请使用between and 的方式，或者使用exists来查询
		6.	联合查询时，尽量是小结果集驱动大结果集，join时不要关联太多表，关联表太多时，会造成更多的锁定和阻塞
		7.	使用like查询时，不要使用%%方式，应改为使用'条件%'方式，如果该列的like频率较高时，为该列添加一个全文检索索引，在使用'条件%'方式时可以使用索引，提高查询效率
		8.	当查询结果为多条时，实际需要的是一条数据时，可以在条件中添加limit 1，只取第一条结果（有些条件需要order by）
		9.	使用count时，请使用count(*),不要使用count(id)
		10.	查询时请按需要查询列信息，过多不需要的列查询时会占用内存，尤其是使用*查询时
		11.	查询时避免使用not null判断，会导致引擎放弃使用索引，进而使用全表扫描操作（如果条件允许的话，在表创建时请给可能为null的列一个默认值）
		更新语句
		1.	更新数据时，按需更新，频繁调用时会明显消耗性能，还有产生大量日志
	从表结构理解
		表字段设置
		1.	列设置默认值，避免null存在，如果不能避免，数值类型请设置为0.0或0，字符串类型的值可以使用varchar，设置默认值''，varchar是可变长字符串，null值时不占用空间，
		例如，char(10)，由于初始值的设定，该列为null时，占用的是10字符


数据库常规索引信息
	主键索引(primay key)
		保证当前列的值是唯一的，一张表只能有一个
	唯一索引(unique)
		保证当前某列的值是唯一的，不能重复，允许null值存在，同一张表中可以有多个唯一索引
	常规索引(index)
		使用在查询频率较多的列上，提高查询效率，一张表中常规索引不易过多，会影响表的插入，更新和删除操作
	全文索引(fulltext)
		只能用于CHAR ,VARCHAR,TEXT数据列类型


sql使用函数作用说明
	
	
